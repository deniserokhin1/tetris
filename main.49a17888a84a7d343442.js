/*! For license information please see main.49a17888a84a7d343442.js.LICENSE.txt */
(()=>{var t={315:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});var i=n(537),r=n.n(i),o=n(645),s=n.n(o)()(r());s.push([t.id,"*{padding:0;margin:0;box-sizing:border-box;overflow:hidden}body{display:flex;align-items:center;justify-content:center;height:100vh;height:100svh;background:linear-gradient(90deg, #b79891, #94716b);font-family:Arial,Helvetica,sans-serif;user-select:none}.grid{display:grid;grid-template-columns:repeat(10, auto);grid-template-rows:repeat(20, auto);padding:.6vh;gap:.3vh;border-radius:.6vh;background-color:rgba(1,8,89,.8)}.grid>div{--cell-size: min(4vh, 7vw);height:var(--cell-size);width:var(--cell-size);border-radius:.3vh;background-color:rgba(126,150,221,.2)}.grid>div.ghost{background-color:rgba(255,255,255,.2)}.grid>div.I{background-color:#6be1ec}.grid>div.J{background-color:#2c8af0}.grid>div.L{background-color:#f2c35b}.grid>div.O{background-color:#f762f2}.grid>div.S{background-color:#7be17b}.grid>div.Z{background-color:#de5c6b}.grid>div.T{background-color:#b276f3}.grid>div.I,.grid>div.J,.grid>div.L,.grid>div.O,.grid>div.S,.grid>div.T,.grid>div.Z,.grid>div.ghost,.grid>div.sad{box-shadow:inset 2px 2px 2px rgba(255,255,255,.2),inset -2px -2px 2px rgba(1,8,89,.2)}","",{version:3,sources:["webpack://./src/styles/style.scss"],names:[],mappings:"AAAA,EACI,SAAA,CACA,QAAA,CACA,qBAAA,CACA,eAAA,CAGJ,KACI,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,YAAA,CACA,aAAA,CACA,mDAAA,CACA,sCAAA,CACA,gBAAA,CAGJ,MACI,YAAA,CACA,sCAAA,CACA,mCAAA,CACA,YAAA,CACA,QAAA,CACA,kBAAA,CACA,gCAAA,CAGJ,UACI,0BAAA,CACA,uBAAA,CACA,sBAAA,CACA,kBAAA,CACA,qCAAA,CAGJ,gBACI,qCAAA,CAGJ,YACI,wBAAA,CAGJ,YACI,wBAAA,CAGJ,YACI,wBAAA,CAGJ,YACI,wBAAA,CAGJ,YACI,wBAAA,CAGJ,YACI,wBAAA,CAGJ,YACI,wBAAA,CAGJ,kHASI,qFAAA",sourcesContent:["* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n    overflow: hidden;\n}\n\nbody {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    height: 100svh;\n    background: linear-gradient(90deg, #b79891, #94716b);\n    font-family: Arial, Helvetica, sans-serif;\n    user-select: none;\n}\n\n.grid {\n    display: grid;\n    grid-template-columns: repeat(10, auto);\n    grid-template-rows: repeat(20, auto);\n    padding: 0.6vh;\n    gap: 0.3vh;\n    border-radius: 0.6vh;\n    background-color: rgba(1, 8, 89, 0.8);\n}\n\n.grid > div {\n    --cell-size: min(4vh, 7vw);\n    height: var(--cell-size);\n    width: var(--cell-size);\n    border-radius: 0.3vh;\n    background-color: rgba(126, 150, 221, 0.2);\n}\n\n.grid > div.ghost {\n    background-color: rgba(255, 255, 255, 0.2);\n}\n\n.grid > div.I {\n    background-color: #6be1ec;\n}\n\n.grid > div.J {\n    background-color: #2c8af0;\n}\n\n.grid > div.L {\n    background-color: #f2c35b;\n}\n\n.grid > div.O {\n    background-color: #f762f2;\n}\n\n.grid > div.S {\n    background-color: #7be17b;\n}\n\n.grid > div.Z {\n    background-color: #de5c6b;\n}\n\n.grid > div.T {\n    background-color: #b276f3;\n}\n\n.grid > div.I,\n.grid > div.J,\n.grid > div.L,\n.grid > div.O,\n.grid > div.S,\n.grid > div.T,\n.grid > div.Z,\n.grid > div.ghost,\n.grid > div.sad {\n    box-shadow: inset 2px 2px 2px rgba(255, 255, 255, 0.2), inset -2px -2px 2px rgba(1, 8, 89, 0.2);\n}\n"],sourceRoot:""}]);const a=s},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,r,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(i)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var u=0;u<t.length;u++){var h=[].concat(t[u]);i&&s[h[0]]||(void 0!==o&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=o),n&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=n):h[2]=n),r&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=r):h[4]="".concat(r)),e.push(h))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(r," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},840:(t,e,n)=>{var i;!function(r,o,s,a){"use strict";var c,u=["","webkit","Moz","MS","ms","o"],h=o.createElement("div"),l="function",p=Math.round,d=Math.abs,f=Date.now;function v(t,e,n){return setTimeout(C(t,n),e)}function m(t,e,n){return!!Array.isArray(t)&&(g(t,n[e],n),!0)}function g(t,e,n){var i;if(t)if(t.forEach)t.forEach(e,n);else if(t.length!==a)for(i=0;i<t.length;)e.call(n,t[i],i,t),i++;else for(i in t)t.hasOwnProperty(i)&&e.call(n,t[i],i,t)}function A(t,e,n){var i="DEPRECATED METHOD: "+e+"\n"+n+" AT \n";return function(){var e=new Error("get-stack-trace"),n=e&&e.stack?e.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",o=r.console&&(r.console.warn||r.console.log);return o&&o.call(r.console,i,n),t.apply(this,arguments)}}c="function"!=typeof Object.assign?function(t){if(t===a||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var i=arguments[n];if(i!==a&&null!==i)for(var r in i)i.hasOwnProperty(r)&&(e[r]=i[r])}return e}:Object.assign;var y=A((function(t,e,n){for(var i=Object.keys(e),r=0;r<i.length;)(!n||n&&t[i[r]]===a)&&(t[i[r]]=e[i[r]]),r++;return t}),"extend","Use `assign`."),T=A((function(t,e){return y(t,e,!0)}),"merge","Use `assign`.");function b(t,e,n){var i,r=e.prototype;(i=t.prototype=Object.create(r)).constructor=t,i._super=r,n&&c(i,n)}function C(t,e){return function(){return t.apply(e,arguments)}}function w(t,e){return typeof t==l?t.apply(e&&e[0]||a,e):t}function E(t,e){return t===a?e:t}function x(t,e,n){g(O(e),(function(e){t.addEventListener(e,n,!1)}))}function I(t,e,n){g(O(e),(function(e){t.removeEventListener(e,n,!1)}))}function S(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function P(t,e){return t.indexOf(e)>-1}function O(t){return t.trim().split(/\s+/g)}function M(t,e,n){if(t.indexOf&&!n)return t.indexOf(e);for(var i=0;i<t.length;){if(n&&t[i][n]==e||!n&&t[i]===e)return i;i++}return-1}function R(t){return Array.prototype.slice.call(t,0)}function k(t,e,n){for(var i=[],r=[],o=0;o<t.length;){var s=e?t[o][e]:t[o];M(r,s)<0&&i.push(t[o]),r[o]=s,o++}return n&&(i=e?i.sort((function(t,n){return t[e]>n[e]})):i.sort()),i}function D(t,e){for(var n,i,r=e[0].toUpperCase()+e.slice(1),o=0;o<u.length;){if((i=(n=u[o])?n+r:e)in t)return i;o++}return a}var F=1;function _(t){var e=t.ownerDocument||t;return e.defaultView||e.parentWindow||r}var Y="ontouchstart"in r,z=D(r,"PointerEvent")!==a,L=Y&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),X="touch",N="mouse",q=25,G=1,B=4,J=8,j=1,H=2,W=4,U=8,Z=16,V=H|W,Q=U|Z,K=V|Q,$=["x","y"],tt=["clientX","clientY"];function et(t,e){var n=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){w(t.options.enable,[t])&&n.handler(e)},this.init()}function nt(t,e,n){var i=n.pointers.length,r=n.changedPointers.length,o=e&G&&i-r==0,s=e&(B|J)&&i-r==0;n.isFirst=!!o,n.isFinal=!!s,o&&(t.session={}),n.eventType=e,function(t,e){var n=t.session,i=e.pointers,r=i.length;n.firstInput||(n.firstInput=it(e)),r>1&&!n.firstMultiple?n.firstMultiple=it(e):1===r&&(n.firstMultiple=!1);var o=n.firstInput,s=n.firstMultiple,c=s?s.center:o.center,u=e.center=rt(i);e.timeStamp=f(),e.deltaTime=e.timeStamp-o.timeStamp,e.angle=ct(c,u),e.distance=at(c,u),function(t,e){var n=e.center,i=t.offsetDelta||{},r=t.prevDelta||{},o=t.prevInput||{};e.eventType!==G&&o.eventType!==B||(r=t.prevDelta={x:o.deltaX||0,y:o.deltaY||0},i=t.offsetDelta={x:n.x,y:n.y}),e.deltaX=r.x+(n.x-i.x),e.deltaY=r.y+(n.y-i.y)}(n,e),e.offsetDirection=st(e.deltaX,e.deltaY);var h,l,p=ot(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=p.x,e.overallVelocityY=p.y,e.overallVelocity=d(p.x)>d(p.y)?p.x:p.y,e.scale=s?(h=s.pointers,at((l=i)[0],l[1],tt)/at(h[0],h[1],tt)):1,e.rotation=s?function(t,e){return ct(e[1],e[0],tt)+ct(t[1],t[0],tt)}(s.pointers,i):0,e.maxPointers=n.prevInput?e.pointers.length>n.prevInput.maxPointers?e.pointers.length:n.prevInput.maxPointers:e.pointers.length,function(t,e){var n,i,r,o,s=t.lastInterval||e,c=e.timeStamp-s.timeStamp;if(e.eventType!=J&&(c>q||s.velocity===a)){var u=e.deltaX-s.deltaX,h=e.deltaY-s.deltaY,l=ot(c,u,h);i=l.x,r=l.y,n=d(l.x)>d(l.y)?l.x:l.y,o=st(u,h),t.lastInterval=e}else n=s.velocity,i=s.velocityX,r=s.velocityY,o=s.direction;e.velocity=n,e.velocityX=i,e.velocityY=r,e.direction=o}(n,e);var v=t.element;S(e.srcEvent.target,v)&&(v=e.srcEvent.target),e.target=v}(t,n),t.emit("hammer.input",n),t.recognize(n),t.session.prevInput=n}function it(t){for(var e=[],n=0;n<t.pointers.length;)e[n]={clientX:p(t.pointers[n].clientX),clientY:p(t.pointers[n].clientY)},n++;return{timeStamp:f(),pointers:e,center:rt(e),deltaX:t.deltaX,deltaY:t.deltaY}}function rt(t){var e=t.length;if(1===e)return{x:p(t[0].clientX),y:p(t[0].clientY)};for(var n=0,i=0,r=0;r<e;)n+=t[r].clientX,i+=t[r].clientY,r++;return{x:p(n/e),y:p(i/e)}}function ot(t,e,n){return{x:e/t||0,y:n/t||0}}function st(t,e){return t===e?j:d(t)>=d(e)?t<0?H:W:e<0?U:Z}function at(t,e,n){n||(n=$);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return Math.sqrt(i*i+r*r)}function ct(t,e,n){n||(n=$);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return 180*Math.atan2(r,i)/Math.PI}et.prototype={handler:function(){},init:function(){this.evEl&&x(this.element,this.evEl,this.domHandler),this.evTarget&&x(this.target,this.evTarget,this.domHandler),this.evWin&&x(_(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&I(this.element,this.evEl,this.domHandler),this.evTarget&&I(this.target,this.evTarget,this.domHandler),this.evWin&&I(_(this.element),this.evWin,this.domHandler)}};var ut={mousedown:G,mousemove:2,mouseup:B},ht="mousedown",lt="mousemove mouseup";function pt(){this.evEl=ht,this.evWin=lt,this.pressed=!1,et.apply(this,arguments)}b(pt,et,{handler:function(t){var e=ut[t.type];e&G&&0===t.button&&(this.pressed=!0),2&e&&1!==t.which&&(e=B),this.pressed&&(e&B&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:N,srcEvent:t}))}});var dt={pointerdown:G,pointermove:2,pointerup:B,pointercancel:J,pointerout:J},ft={2:X,3:"pen",4:N,5:"kinect"},vt="pointerdown",mt="pointermove pointerup pointercancel";function gt(){this.evEl=vt,this.evWin=mt,et.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}r.MSPointerEvent&&!r.PointerEvent&&(vt="MSPointerDown",mt="MSPointerMove MSPointerUp MSPointerCancel"),b(gt,et,{handler:function(t){var e=this.store,n=!1,i=t.type.toLowerCase().replace("ms",""),r=dt[i],o=ft[t.pointerType]||t.pointerType,s=o==X,a=M(e,t.pointerId,"pointerId");r&G&&(0===t.button||s)?a<0&&(e.push(t),a=e.length-1):r&(B|J)&&(n=!0),a<0||(e[a]=t,this.callback(this.manager,r,{pointers:e,changedPointers:[t],pointerType:o,srcEvent:t}),n&&e.splice(a,1))}});var At={touchstart:G,touchmove:2,touchend:B,touchcancel:J};function yt(){this.evTarget="touchstart",this.evWin="touchstart touchmove touchend touchcancel",this.started=!1,et.apply(this,arguments)}function Tt(t,e){var n=R(t.touches),i=R(t.changedTouches);return e&(B|J)&&(n=k(n.concat(i),"identifier",!0)),[n,i]}b(yt,et,{handler:function(t){var e=At[t.type];if(e===G&&(this.started=!0),this.started){var n=Tt.call(this,t,e);e&(B|J)&&n[0].length-n[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:X,srcEvent:t})}}});var bt={touchstart:G,touchmove:2,touchend:B,touchcancel:J},Ct="touchstart touchmove touchend touchcancel";function wt(){this.evTarget=Ct,this.targetIds={},et.apply(this,arguments)}function Et(t,e){var n=R(t.touches),i=this.targetIds;if(e&(2|G)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var r,o,s=R(t.changedTouches),a=[],c=this.target;if(o=n.filter((function(t){return S(t.target,c)})),e===G)for(r=0;r<o.length;)i[o[r].identifier]=!0,r++;for(r=0;r<s.length;)i[s[r].identifier]&&a.push(s[r]),e&(B|J)&&delete i[s[r].identifier],r++;return a.length?[k(o.concat(a),"identifier",!0),a]:void 0}b(wt,et,{handler:function(t){var e=bt[t.type],n=Et.call(this,t,e);n&&this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:X,srcEvent:t})}});var xt=2500;function It(){et.apply(this,arguments);var t=C(this.handler,this);this.touch=new wt(this.manager,t),this.mouse=new pt(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function St(t,e){t&G?(this.primaryTouch=e.changedPointers[0].identifier,Pt.call(this,e)):t&(B|J)&&Pt.call(this,e)}function Pt(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var n={x:e.clientX,y:e.clientY};this.lastTouches.push(n);var i=this.lastTouches;setTimeout((function(){var t=i.indexOf(n);t>-1&&i.splice(t,1)}),xt)}}function Ot(t){for(var e=t.srcEvent.clientX,n=t.srcEvent.clientY,i=0;i<this.lastTouches.length;i++){var r=this.lastTouches[i],o=Math.abs(e-r.x),s=Math.abs(n-r.y);if(o<=25&&s<=25)return!0}return!1}b(It,et,{handler:function(t,e,n){var i=n.pointerType==X,r=n.pointerType==N;if(!(r&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(i)St.call(this,e,n);else if(r&&Ot.call(this,n))return;this.callback(t,e,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Mt=D(h.style,"touchAction"),Rt=Mt!==a,kt="compute",Dt="auto",Ft="manipulation",_t="none",Yt="pan-x",zt="pan-y",Lt=function(){if(!Rt)return!1;var t={},e=r.CSS&&r.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach((function(n){t[n]=!e||r.CSS.supports("touch-action",n)})),t}();function Xt(t,e){this.manager=t,this.set(e)}Xt.prototype={set:function(t){t==kt&&(t=this.compute()),Rt&&this.manager.element.style&&Lt[t]&&(this.manager.element.style[Mt]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return g(this.manager.recognizers,(function(e){w(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))})),function(t){if(P(t,_t))return _t;var e=P(t,Yt),n=P(t,zt);return e&&n?_t:e||n?e?Yt:zt:P(t,Ft)?Ft:Dt}(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,n=t.offsetDirection;if(this.manager.session.prevented)e.preventDefault();else{var i=this.actions,r=P(i,_t)&&!Lt[_t],o=P(i,zt)&&!Lt[zt],s=P(i,Yt)&&!Lt[Yt];if(r){var a=1===t.pointers.length,c=t.distance<2,u=t.deltaTime<250;if(a&&c&&u)return}if(!s||!o)return r||o&&n&V||s&&n&Q?this.preventSrc(e):void 0}},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var Nt=1,qt=32;function Gt(t){this.options=c({},this.defaults,t||{}),this.id=F++,this.manager=null,this.options.enable=E(this.options.enable,!0),this.state=Nt,this.simultaneous={},this.requireFail=[]}function Bt(t){return 16&t?"cancel":8&t?"end":4&t?"move":2&t?"start":""}function Jt(t){return t==Z?"down":t==U?"up":t==H?"left":t==W?"right":""}function jt(t,e){var n=e.manager;return n?n.get(t):t}function Ht(){Gt.apply(this,arguments)}function Wt(){Ht.apply(this,arguments),this.pX=null,this.pY=null}function Ut(){Ht.apply(this,arguments)}function Zt(){Gt.apply(this,arguments),this._timer=null,this._input=null}function Vt(){Ht.apply(this,arguments)}function Qt(){Ht.apply(this,arguments)}function Kt(){Gt.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function $t(t,e){return(e=e||{}).recognizers=E(e.recognizers,$t.defaults.preset),new te(t,e)}function te(t,e){this.options=c({},$t.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=new(this.options.inputClass||(z?gt:L?wt:Y?It:pt))(this,nt),this.touchAction=new Xt(this,this.options.touchAction),ee(this,!0),g(this.options.recognizers,(function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])}),this)}function ee(t,e){var n,i=t.element;i.style&&(g(t.options.cssProps,(function(r,o){n=D(i.style,o),e?(t.oldCssProps[n]=i.style[n],i.style[n]=r):i.style[n]=t.oldCssProps[n]||""})),e||(t.oldCssProps={}))}Gt.prototype={defaults:{},set:function(t){return c(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(m(t,"recognizeWith",this))return this;var e=this.simultaneous;return e[(t=jt(t,this)).id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return m(t,"dropRecognizeWith",this)||(t=jt(t,this),delete this.simultaneous[t.id]),this},requireFailure:function(t){if(m(t,"requireFailure",this))return this;var e=this.requireFail;return-1===M(e,t=jt(t,this))&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(m(t,"dropRequireFailure",this))return this;t=jt(t,this);var e=M(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){var e=this,n=this.state;function i(n){e.manager.emit(n,t)}n<8&&i(e.options.event+Bt(n)),i(e.options.event),t.additionalEvent&&i(t.additionalEvent),n>=8&&i(e.options.event+Bt(n))},tryEmit:function(t){if(this.canEmit())return this.emit(t);this.state=qt},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(qt|Nt)))return!1;t++}return!0},recognize:function(t){var e=c({},t);if(!w(this.options.enable,[this,e]))return this.reset(),void(this.state=qt);56&this.state&&(this.state=Nt),this.state=this.process(e),30&this.state&&this.tryEmit(e)},process:function(t){},getTouchAction:function(){},reset:function(){}},b(Ht,Gt,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,n=t.eventType,i=6&e,r=this.attrTest(t);return i&&(n&J||!r)?16|e:i||r?n&B?8|e:2&e?4|e:2:qt}}),b(Wt,Ht,{defaults:{event:"pan",threshold:10,pointers:1,direction:K},getTouchAction:function(){var t=this.options.direction,e=[];return t&V&&e.push(zt),t&Q&&e.push(Yt),e},directionTest:function(t){var e=this.options,n=!0,i=t.distance,r=t.direction,o=t.deltaX,s=t.deltaY;return r&e.direction||(e.direction&V?(r=0===o?j:o<0?H:W,n=o!=this.pX,i=Math.abs(t.deltaX)):(r=0===s?j:s<0?U:Z,n=s!=this.pY,i=Math.abs(t.deltaY))),t.direction=r,n&&i>e.threshold&&r&e.direction},attrTest:function(t){return Ht.prototype.attrTest.call(this,t)&&(2&this.state||!(2&this.state)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=Jt(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),b(Ut,Ht,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[_t]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||2&this.state)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),b(Zt,Gt,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[Dt]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,r=t.deltaTime>e.time;if(this._input=t,!i||!n||t.eventType&(B|J)&&!r)this.reset();else if(t.eventType&G)this.reset(),this._timer=v((function(){this.state=8,this.tryEmit()}),e.time,this);else if(t.eventType&B)return 8;return qt},reset:function(){clearTimeout(this._timer)},emit:function(t){8===this.state&&(t&&t.eventType&B?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=f(),this.manager.emit(this.options.event,this._input)))}}),b(Vt,Ht,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[_t]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||2&this.state)}}),b(Qt,Ht,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:V|Q,pointers:1},getTouchAction:function(){return Wt.prototype.getTouchAction.call(this)},attrTest:function(t){var e,n=this.options.direction;return n&(V|Q)?e=t.overallVelocity:n&V?e=t.overallVelocityX:n&Q&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&n&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&d(e)>this.options.velocity&&t.eventType&B},emit:function(t){var e=Jt(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),b(Kt,Gt,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[Ft]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,r=t.deltaTime<e.time;if(this.reset(),t.eventType&G&&0===this.count)return this.failTimeout();if(i&&r&&n){if(t.eventType!=B)return this.failTimeout();var o=!this.pTime||t.timeStamp-this.pTime<e.interval,s=!this.pCenter||at(this.pCenter,t.center)<e.posThreshold;if(this.pTime=t.timeStamp,this.pCenter=t.center,s&&o?this.count+=1:this.count=1,this._input=t,0==this.count%e.taps)return this.hasRequireFailures()?(this._timer=v((function(){this.state=8,this.tryEmit()}),e.interval,this),2):8}return qt},failTimeout:function(){return this._timer=v((function(){this.state=qt}),this.options.interval,this),qt},reset:function(){clearTimeout(this._timer)},emit:function(){8==this.state&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),$t.VERSION="2.0.7",$t.defaults={domEvents:!1,touchAction:kt,enable:!0,inputTarget:null,inputClass:null,preset:[[Vt,{enable:!1}],[Ut,{enable:!1},["rotate"]],[Qt,{direction:V}],[Wt,{direction:V},["swipe"]],[Kt],[Kt,{event:"doubletap",taps:2},["tap"]],[Zt]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}},te.prototype={set:function(t){return c(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?2:1},recognize:function(t){var e=this.session;if(!e.stopped){var n;this.touchAction.preventDefaults(t);var i=this.recognizers,r=e.curRecognizer;(!r||r&&8&r.state)&&(r=e.curRecognizer=null);for(var o=0;o<i.length;)n=i[o],2===e.stopped||r&&n!=r&&!n.canRecognizeWith(r)?n.reset():n.recognize(t),!r&&14&n.state&&(r=e.curRecognizer=n),o++}},get:function(t){if(t instanceof Gt)return t;for(var e=this.recognizers,n=0;n<e.length;n++)if(e[n].options.event==t)return e[n];return null},add:function(t){if(m(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(m(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,n=M(e,t);-1!==n&&(e.splice(n,1),this.touchAction.update())}return this},on:function(t,e){if(t!==a&&e!==a){var n=this.handlers;return g(O(t),(function(t){n[t]=n[t]||[],n[t].push(e)})),this}},off:function(t,e){if(t!==a){var n=this.handlers;return g(O(t),(function(t){e?n[t]&&n[t].splice(M(n[t],e),1):delete n[t]})),this}},emit:function(t,e){this.options.domEvents&&function(t,e){var n=o.createEvent("Event");n.initEvent(t,!0,!0),n.gesture=e,e.target.dispatchEvent(n)}(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](e),i++}},destroy:function(){this.element&&ee(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},c($t,{INPUT_START:G,INPUT_MOVE:2,INPUT_END:B,INPUT_CANCEL:J,STATE_POSSIBLE:Nt,STATE_BEGAN:2,STATE_CHANGED:4,STATE_ENDED:8,STATE_RECOGNIZED:8,STATE_CANCELLED:16,STATE_FAILED:qt,DIRECTION_NONE:j,DIRECTION_LEFT:H,DIRECTION_RIGHT:W,DIRECTION_UP:U,DIRECTION_DOWN:Z,DIRECTION_HORIZONTAL:V,DIRECTION_VERTICAL:Q,DIRECTION_ALL:K,Manager:te,Input:et,TouchAction:Xt,TouchInput:wt,MouseInput:pt,PointerEventInput:gt,TouchMouseInput:It,SingleTouchInput:yt,Recognizer:Gt,AttrRecognizer:Ht,Tap:Kt,Pan:Wt,Swipe:Qt,Pinch:Ut,Rotate:Vt,Press:Zt,on:x,off:I,each:g,merge:T,extend:y,assign:c,inherit:b,bindFn:C,prefixed:D}),(void 0!==r?r:"undefined"!=typeof self?self:{}).Hammer=$t,(i=function(){return $t}.call(e,n,e,t))===a||(t.exports=i)}(window,document)},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},s=[],a=0;a<t.length;a++){var c=t[a],u=i.base?c[0]+i.base:c[0],h=o[u]||0,l="".concat(u," ").concat(h);o[u]=h+1;var p=n(l),d={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(d);else{var f=r(d,i);i.byIndex=a,e.splice(a,0,{identifier:l,updater:f,references:1})}s.push(l)}return s}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var o=i(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=n(o[s]);e[a].references--}for(var c=i(t,r),u=0;u<o.length;u++){var h=n(o[u]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}o=c}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{"use strict";var t=10,e=20,i={I:[[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],J:[[1,0,0],[1,1,1],[0,0,0]],L:[[0,0,1],[1,1,1],[0,0,0]],O:[[1,1],[1,1]],S:[[0,1,1],[1,1,0],[0,0,0]],Z:[[1,1,0],[0,1,1],[0,0,0]],T:[[0,1,0],[1,1,1],[0,0,0]]};function r(e,n){return e*t+n}var o=n(379),s=n.n(o),a=n(795),c=n.n(a),u=n(569),h=n.n(u),l=n(565),p=n.n(l),d=n(216),f=n.n(d),v=n(589),m=n.n(v),g=n(315),A={};A.styleTagTransform=m(),A.setAttributes=p(),A.insert=h().bind(null,"head"),A.domAPI=c(),A.insertStyleElement=f(),s()(g.Z,A),g.Z&&g.Z.locals&&g.Z.locals;var y,T,b,C=function(){function n(){this.isGameOver=!1,this.playfield=[],this.tetromino={column:0,matrix:[],name:"",row:0,matrixSize:0,ghostColumn:0,ghostRow:0},this.isPromt=!1,this.isAutoMove=!0,this.init()}return n.prototype.init=function(){this.generatePlayfield(),this.generateFigure()},n.prototype.generatePlayfield=function(){this.playfield=new Array(e).fill(1).map((function(){return new Array(t).fill(0)}))},n.prototype.generateFigure=function(){var e,n=(e=Object.keys(i))[Math.floor(Math.random()*e.length)],r=i[n],o=r.length,s=t/2-Math.floor(r.length/2);this.tetromino={name:n,matrix:r,row:-1,column:s,matrixSize:o,ghostColumn:this.isPromt?s:-1,ghostRow:(this.isPromt,-1)},this.calculateGhostPosition()},n.prototype.moveFigureDown=function(){this.tetromino.row+=1,this.canMove()||(this.tetromino.row-=1,this.landFigure())},n.prototype.moveFigureRight=function(){this.tetromino.column+=1,this.canMove()?this.calculateGhostPosition():this.tetromino.column-=1},n.prototype.moveFigureLeft=function(){this.tetromino.column-=1,this.canMove()?this.calculateGhostPosition():this.tetromino.column+=1},n.prototype.rotateFigure=function(){var t=this.tetromino.matrix,e=function(t){for(var e=t.length,n=[],i=0;i<e;i++){n[i]=[];for(var r=0;r<e;r++)n[i][r]=t[e-r-1][i]}return n}(this.tetromino.matrix);this.tetromino.matrix=e,this.canMove()?this.calculateGhostPosition():this.tetromino.matrix=t},n.prototype.dropFigureDown=function(){this.tetromino.row=this.tetromino.ghostRow,this.landFigure()},n.prototype.canMove=function(){for(var t=this.tetromino.matrix,e=0;e<t.length;e++)for(var n=0;n<t.length;n++)if(t[e][n]){if(this.isOutSideOfPlayBoard(e,n))return!1;if(this.isTouch(e,n))return!1}return!0},n.prototype.isOutSideOfPlayBoard=function(e,n){return this.tetromino.column+n<0||this.tetromino.column+n>=t||this.tetromino.row+e>=this.playfield.length},n.prototype.landFigure=function(){for(var t=0;t<this.tetromino.matrixSize;t++)for(var e=0;e<this.tetromino.matrixSize;e++)if(this.tetromino.matrix[t][e]){if(this.isOutSideOfTopBoard(t))return void(this.isGameOver=!0);this.playfield[this.tetromino.row+t][this.tetromino.column+e]=this.tetromino.name}this.clearFilledRows(),this.generateFigure()},n.prototype.isOutSideOfTopBoard=function(t){return this.tetromino.row+t<0},n.prototype.isTouch=function(t,e){var n;return null===(n=this.playfield[this.tetromino.row+t])||void 0===n?void 0:n[this.tetromino.column+e]},n.prototype.clearFilledRows=function(){var t=this.findFilledRows();this.removeFilledRows(t)},n.prototype.findFilledRows=function(){for(var t=[],n=0;n<e;n++)this.playfield[n].every((function(t){return Boolean(t)}))&&t.push(n);return t},n.prototype.removeFilledRows=function(t){var e=this;t.forEach((function(t){return e.dropRowsAbove(t)}))},n.prototype.dropRowsAbove=function(e){for(var n=e;n>0;n--)this.playfield[n]=this.playfield[n-1];this.playfield[0]=new Array(t).fill(0)},n.prototype.calculateGhostPosition=function(){var t=this.tetromino.row;for(this.tetromino.row++;this.canMove();)this.tetromino.row++;this.tetromino.ghostRow=this.tetromino.row-1,this.tetromino.ghostColumn=this.tetromino.column,this.tetromino.row=t},n}(),w=n(840),E=n.n(w),x=new C,I=document.querySelectorAll(".grid>div"),S=document.querySelector(".settings");function P(t){switch(t.key){case"ArrowUp":D();break;case"ArrowDown":M();break;case"ArrowLeft":k();break;case"ArrowRight":R();break;case" ":z();default:return}}function O(){I.forEach((function(t){return t.removeAttribute("class")})),function(){for(var n=0;n<e;n++)for(var i=0;i<t;i++)if(x.playfield[n][i]){var o=x.playfield[n][i].toString(),s=r(n,i);I[s].classList.add(o)}}(),function(){for(var t=x.tetromino.name,e=x.tetromino.matrix.length,n=0;n<e;n++)for(var i=0;i<e;i++)if(x.tetromino.matrix[n][i]&&!(x.tetromino.row+n<0)){var o=r(x.tetromino.row+n,x.tetromino.column+i);I[o].classList.add(t)}}(),function(){if(x.isPromt)for(var t=x.tetromino.matrix.length,e=0;e<t;e++)for(var n=0;n<t;n++)if(x.tetromino.matrix[e][n]&&!(x.tetromino.ghostRow+e<0)){var i=r(x.tetromino.ghostRow+e,x.tetromino.ghostColumn+n);I[i].classList.add("ghost")}}()}function M(){x.moveFigureDown(),O(),_(),x.isAutoMove&&F(),x.isGameOver&&Y()}function R(){x.moveFigureRight(),O()}function k(){x.moveFigureLeft(),O()}function D(){x.rotateFigure(),O()}function F(){y=setTimeout((function(){T=requestAnimationFrame(M)}),1e3)}function _(){cancelAnimationFrame(T),clearTimeout(y)}function Y(){_(),document.removeEventListener("keydown",P),b.off("panstart panleft panright pandown swipedown tap")}function z(){x.dropFigureDown(),O(),_(),x.isAutoMove&&F(),x.isGameOver&&Y()}null==S||S.addEventListener("click",(function(){_(),x.isPromt=!x.isPromt})),document.addEventListener("keydown",P),function(){document.addEventListener("dblclick",(function(t){t.preventDefault()})),(b=new(E())(document.querySelector("body"))).get("pan").set({direction:E().DIRECTION_ALL}),b.get("swipe").set({direction:E().DIRECTION_ALL});var t=0,e=0;b.on("panstart",(function(){t=0,e=0})),b.on("panleft",(function(n){console.log("event.deltaX:",n.deltaX),Math.abs(n.deltaX-t)>30&&(k(),t=n.deltaX,e=n.deltaY)})),b.on("panright",(function(n){console.log("event.deltaX:",n.deltaX),Math.abs(n.deltaX-t)>30&&(R(),t=n.deltaX,e=n.deltaY)})),b.on("pandown",(function(n){console.log("event.deltaY:",n.deltaY),Math.abs(n.deltaY-e)>30&&(M(),t=n.deltaX,e=n.deltaY)})),b.on("swipedown",(function(){z()})),b.on("tap",(function(){D()}))}(),M()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,