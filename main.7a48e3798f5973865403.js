/*! For license information please see main.7a48e3798f5973865403.js.LICENSE.txt */
(()=>{var t={315:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});var i=n(537),r=n.n(i),o=n(645),s=n.n(o)()(r());s.push([t.id,'*{padding:0;margin:0;box-sizing:border-box;overflow:hidden}body{position:relative;display:flex;align-items:center;justify-content:center;height:100vh;height:100svh;background:linear-gradient(90deg, #b79891, #94716b);font-family:Arial,Helvetica,sans-serif;user-select:none}.grid{display:none;grid-template-columns:repeat(10, auto);grid-template-rows:repeat(20, auto);padding:.6vh;gap:.3vh;border-radius:.6vh;background-color:rgba(1,8,89,.8)}.grid.start{display:grid}.grid div{--cell-size: min(4vh, 7vw);height:var(--cell-size);width:var(--cell-size);border-radius:.3vh;background-color:rgba(126,150,221,.2)}.grid>div.ghost{background-color:rgba(255,255,255,.2)}.grid>div.I{background-color:#6be1ec}.grid>div.J{background-color:#2c8af0}.grid>div.L{background-color:#f2c35b}.grid>div.O{background-color:#f762f2}.grid>div.S{background-color:#7be17b}.grid>div.Z{background-color:#de5c6b}.grid>div.T{background-color:#b276f3}.grid>div.I,.grid>div.J,.grid>div.L,.grid>div.O,.grid>div.S,.grid>div.T,.grid>div.Z,.grid>div.ghost,.grid>div.sad{box-shadow:inset 2px 2px 2px rgba(255,255,255,.2),inset -2px -2px 2px rgba(1,8,89,.2)}.grid>div.cell{--cell-size: min(4vh, 7vw);height:var(--cell-size);width:var(--cell-size);border-radius:.3vh;background-color:rgba(126,150,221,.2)}.grid>div.gameover{animation:hide .5s}.settings{--button-size: min(3vh, 6vw);--font-size: min(3vh, 6vw);--border-size: min(1vh, 2vw);all:initial;padding:var(--button-size) calc(var(--button-size)*2);background:#466cc2;border-radius:var(--border-size);font-family:inherit;font-size:inherit;position:relative;overflow:hidden;transition:all .2s;color:#f0f8ff;font-size:var(--font-size)}.settings:before{--light-size: min(5vh, 10vw);content:"";position:absolute;background:linear-gradient(90deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.1));opacity:.5;top:0;left:0;width:var(--light-size);height:100%;transform:translateX(calc(var(--button-size) * -10)) skewX(-45deg)}.settings:active{transform:scale(0.95)}.settings:hover{--shadow-size: min(1vh, 2vw);box-shadow:0 var(--shadow-size) calc(var(--shadow-size)*2) rgba(0,0,0,.4)}.settings:hover:before{animation:move-light 1.5s ease-in-out;animation-iteration-count:infinite;-moz-animation-iteration-count:infinite;-webkit-animation-iteration-count:infinite}.hide{display:none}@keyframes move-light{0%{transform:translateX(calc(var(--button-size) * -10)) skewX(-45deg)}100%{transform:translateX(calc(var(--button-size) * 20)) skewX(-45deg)}}@keyframes hide{0%{transform:scale(1) rotate(0)}50%{transform:scale(0.5) rotate(30deg)}100%{transform:scale(1) rotate(0)}}',"",{version:3,sources:["webpack://./src/styles/style.scss"],names:[],mappings:"AAAA,EACI,SAAA,CACA,QAAA,CACA,qBAAA,CACA,eAAA,CAGJ,KACI,iBAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,YAAA,CACA,aAAA,CACA,mDAAA,CACA,sCAAA,CACA,gBAAA,CAGJ,MACI,YAAA,CACA,sCAAA,CACA,mCAAA,CACA,YAAA,CACA,QAAA,CACA,kBAAA,CACA,gCAAA,CAEA,YACI,YAAA,CAKJ,UACI,0BAAA,CACA,uBAAA,CACA,sBAAA,CACA,kBAAA,CACA,qCAAA,CAIR,gBACI,qCAAA,CAGJ,YACI,wBAAA,CAGJ,YACI,wBAAA,CAGJ,YACI,wBAAA,CAGJ,YACI,wBAAA,CAGJ,YACI,wBAAA,CAGJ,YACI,wBAAA,CAGJ,YACI,wBAAA,CAGJ,kHASI,qFAAA,CAGJ,eACI,0BAAA,CACA,uBAAA,CACA,sBAAA,CACA,kBAAA,CACA,qCAAA,CAGJ,mBACI,kBAAA,CAGJ,UACI,4BAAA,CACA,0BAAA,CACA,4BAAA,CACA,WAAA,CACA,qDAAA,CACA,kBAAA,CACA,gCAAA,CACA,mBAAA,CACA,iBAAA,CACA,iBAAA,CACA,eAAA,CACA,kBAAA,CACA,aAAA,CACA,0BAAA,CAGJ,iBACI,4BAAA,CACA,UAAA,CACA,iBAAA,CACA,6LAAA,CASA,UAAA,CACA,KAAA,CACA,MAAA,CACA,uBAAA,CACA,WAAA,CACA,kEAAA,CAGJ,iBACI,qBAAA,CAGJ,gBACI,4BAAA,CACA,yEAAA,CACA,uBACI,qCAAA,CACA,kCAAA,CACA,uCAAA,CACA,0CAAA,CAIR,MACI,YAAA,CAGJ,sBACI,GACI,kEAAA,CAEJ,KACI,iEAAA,CAAA,CAIR,gBACI,GACI,4BAAA,CAGJ,IACI,kCAAA,CAGJ,KACI,4BAAA,CAAA",sourcesContent:["* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n    overflow: hidden;\n}\n\nbody {\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    height: 100svh;\n    background: linear-gradient(90deg, #b79891, #94716b);\n    font-family: Arial, Helvetica, sans-serif;\n    user-select: none;\n}\n\n.grid {\n    display: none;\n    grid-template-columns: repeat(10, auto);\n    grid-template-rows: repeat(20, auto);\n    padding: 0.6vh;\n    gap: 0.3vh;\n    border-radius: 0.6vh;\n    background-color: rgba(1, 8, 89, 0.8);\n\n    &.start {\n        display: grid;\n    }\n}\n\n.grid {\n    & div {\n        --cell-size: min(4vh, 7vw);\n        height: var(--cell-size);\n        width: var(--cell-size);\n        border-radius: 0.3vh;\n        background-color: rgba(126, 150, 221, 0.2);\n    }\n}\n\n.grid > div.ghost {\n    background-color: rgba(255, 255, 255, 0.2);\n}\n\n.grid > div.I {\n    background-color: #6be1ec;\n}\n\n.grid > div.J {\n    background-color: #2c8af0;\n}\n\n.grid > div.L {\n    background-color: #f2c35b;\n}\n\n.grid > div.O {\n    background-color: #f762f2;\n}\n\n.grid > div.S {\n    background-color: #7be17b;\n}\n\n.grid > div.Z {\n    background-color: #de5c6b;\n}\n\n.grid > div.T {\n    background-color: #b276f3;\n}\n\n.grid > div.I,\n.grid > div.J,\n.grid > div.L,\n.grid > div.O,\n.grid > div.S,\n.grid > div.T,\n.grid > div.Z,\n.grid > div.ghost,\n.grid > div.sad {\n    box-shadow: inset 2px 2px 2px rgba(255, 255, 255, 0.2), inset -2px -2px 2px rgba(1, 8, 89, 0.2);\n}\n\n.grid > div.cell {\n    --cell-size: min(4vh, 7vw);\n    height: var(--cell-size);\n    width: var(--cell-size);\n    border-radius: 0.3vh;\n    background-color: rgba(126, 150, 221, 0.2);\n}\n\n.grid > div.gameover {\n    animation: hide 0.5s;\n}\n\n.settings {\n    --button-size: min(3vh, 6vw);\n    --font-size: min(3vh, 6vw);\n    --border-size: min(1vh, 2vw);\n    all: initial;\n    padding: var(--button-size) calc(var(--button-size) * 2);\n    background: #466cc2;\n    border-radius: var(--border-size);\n    font-family: inherit;\n    font-size: inherit;\n    position: relative;\n    overflow: hidden;\n    transition: all 0.2s;\n    color: aliceblue;\n    font-size: var(--font-size);\n}\n\n.settings:before {\n    --light-size: min(5vh, 10vw);\n    content: '';\n    position: absolute;\n    background: linear-gradient(\n        90deg,\n        rgba(255, 255, 255, 0.1),\n        rgba(255, 255, 255, 0.2),\n        rgba(255, 255, 255, 0.3),\n        rgba(255, 255, 255, 0.3),\n        rgba(255, 255, 255, 0.2),\n        rgba(255, 255, 255, 0.1)\n    );\n    opacity: 0.5;\n    top: 0;\n    left: 0;\n    width: var(--light-size);\n    height: 100%;\n    transform: translateX(calc(var(--button-size) * -10)) skewX(-45deg);\n}\n\n.settings:active {\n    transform: scale(0.95);\n}\n\n.settings:hover {\n    --shadow-size: min(1vh, 2vw);\n    box-shadow: 0 var(--shadow-size) calc(var(--shadow-size) * 2) rgba(0, 0, 0, 0.4);\n    &:before {\n        animation: move-light 1.5s ease-in-out;\n        animation-iteration-count: infinite;\n        -moz-animation-iteration-count: infinite;\n        -webkit-animation-iteration-count: infinite;\n    }\n}\n\n.hide {\n    display: none;\n}\n\n@keyframes move-light {\n    0% {\n        transform: translateX(calc(var(--button-size) * -10)) skewX(-45deg);\n    }\n    100% {\n        transform: translateX(calc(var(--button-size) * 20)) skewX(-45deg);\n    }\n}\n\n@keyframes hide {\n    0% {\n        transform: scale(1) rotate(0);\n    }\n\n    50% {\n        transform: scale(0.5) rotate(30deg);\n    }\n\n    100% {\n        transform: scale(1) rotate(0);\n    }\n}\n"],sourceRoot:""}]);const a=s},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,r,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(i)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var u=0;u<t.length;u++){var l=[].concat(t[u]);i&&s[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(r," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},840:(t,e,n)=>{var i;!function(r,o,s,a){"use strict";var c,u=["","webkit","Moz","MS","ms","o"],l=o.createElement("div"),h="function",d=Math.round,p=Math.abs,f=Date.now;function v(t,e,n){return setTimeout(w(t,n),e)}function A(t,e,n){return!!Array.isArray(t)&&(m(t,n[e],n),!0)}function m(t,e,n){var i;if(t)if(t.forEach)t.forEach(e,n);else if(t.length!==a)for(i=0;i<t.length;)e.call(n,t[i],i,t),i++;else for(i in t)t.hasOwnProperty(i)&&e.call(n,t[i],i,t)}function g(t,e,n){var i="DEPRECATED METHOD: "+e+"\n"+n+" AT \n";return function(){var e=new Error("get-stack-trace"),n=e&&e.stack?e.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",o=r.console&&(r.console.warn||r.console.log);return o&&o.call(r.console,i,n),t.apply(this,arguments)}}c="function"!=typeof Object.assign?function(t){if(t===a||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var i=arguments[n];if(i!==a&&null!==i)for(var r in i)i.hasOwnProperty(r)&&(e[r]=i[r])}return e}:Object.assign;var y=g((function(t,e,n){for(var i=Object.keys(e),r=0;r<i.length;)(!n||n&&t[i[r]]===a)&&(t[i[r]]=e[i[r]]),r++;return t}),"extend","Use `assign`."),C=g((function(t,e){return y(t,e,!0)}),"merge","Use `assign`.");function b(t,e,n){var i,r=e.prototype;(i=t.prototype=Object.create(r)).constructor=t,i._super=r,n&&c(i,n)}function w(t,e){return function(){return t.apply(e,arguments)}}function T(t,e){return typeof t==h?t.apply(e&&e[0]||a,e):t}function E(t,e){return t===a?e:t}function I(t,e,n){m(S(e),(function(e){t.addEventListener(e,n,!1)}))}function x(t,e,n){m(S(e),(function(e){t.removeEventListener(e,n,!1)}))}function k(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function z(t,e){return t.indexOf(e)>-1}function S(t){return t.trim().split(/\s+/g)}function P(t,e,n){if(t.indexOf&&!n)return t.indexOf(e);for(var i=0;i<t.length;){if(n&&t[i][n]==e||!n&&t[i]===e)return i;i++}return-1}function M(t){return Array.prototype.slice.call(t,0)}function R(t,e,n){for(var i=[],r=[],o=0;o<t.length;){var s=e?t[o][e]:t[o];P(r,s)<0&&i.push(t[o]),r[o]=s,o++}return n&&(i=e?i.sort((function(t,n){return t[e]>n[e]})):i.sort()),i}function O(t,e){for(var n,i,r=e[0].toUpperCase()+e.slice(1),o=0;o<u.length;){if((i=(n=u[o])?n+r:e)in t)return i;o++}return a}var B=1;function D(t){var e=t.ownerDocument||t;return e.defaultView||e.parentWindow||r}var F="ontouchstart"in r,L=O(r,"PointerEvent")!==a,_=F&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),Y="touch",X="mouse",G=25,N=1,q=4,J=8,H=1,U=2,W=4,j=8,Z=16,V=U|W,K=j|Z,Q=V|K,$=["x","y"],tt=["clientX","clientY"];function et(t,e){var n=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){T(t.options.enable,[t])&&n.handler(e)},this.init()}function nt(t,e,n){var i=n.pointers.length,r=n.changedPointers.length,o=e&N&&i-r==0,s=e&(q|J)&&i-r==0;n.isFirst=!!o,n.isFinal=!!s,o&&(t.session={}),n.eventType=e,function(t,e){var n=t.session,i=e.pointers,r=i.length;n.firstInput||(n.firstInput=it(e)),r>1&&!n.firstMultiple?n.firstMultiple=it(e):1===r&&(n.firstMultiple=!1);var o=n.firstInput,s=n.firstMultiple,c=s?s.center:o.center,u=e.center=rt(i);e.timeStamp=f(),e.deltaTime=e.timeStamp-o.timeStamp,e.angle=ct(c,u),e.distance=at(c,u),function(t,e){var n=e.center,i=t.offsetDelta||{},r=t.prevDelta||{},o=t.prevInput||{};e.eventType!==N&&o.eventType!==q||(r=t.prevDelta={x:o.deltaX||0,y:o.deltaY||0},i=t.offsetDelta={x:n.x,y:n.y}),e.deltaX=r.x+(n.x-i.x),e.deltaY=r.y+(n.y-i.y)}(n,e),e.offsetDirection=st(e.deltaX,e.deltaY);var l,h,d=ot(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=d.x,e.overallVelocityY=d.y,e.overallVelocity=p(d.x)>p(d.y)?d.x:d.y,e.scale=s?(l=s.pointers,at((h=i)[0],h[1],tt)/at(l[0],l[1],tt)):1,e.rotation=s?function(t,e){return ct(e[1],e[0],tt)+ct(t[1],t[0],tt)}(s.pointers,i):0,e.maxPointers=n.prevInput?e.pointers.length>n.prevInput.maxPointers?e.pointers.length:n.prevInput.maxPointers:e.pointers.length,function(t,e){var n,i,r,o,s=t.lastInterval||e,c=e.timeStamp-s.timeStamp;if(e.eventType!=J&&(c>G||s.velocity===a)){var u=e.deltaX-s.deltaX,l=e.deltaY-s.deltaY,h=ot(c,u,l);i=h.x,r=h.y,n=p(h.x)>p(h.y)?h.x:h.y,o=st(u,l),t.lastInterval=e}else n=s.velocity,i=s.velocityX,r=s.velocityY,o=s.direction;e.velocity=n,e.velocityX=i,e.velocityY=r,e.direction=o}(n,e);var v=t.element;k(e.srcEvent.target,v)&&(v=e.srcEvent.target),e.target=v}(t,n),t.emit("hammer.input",n),t.recognize(n),t.session.prevInput=n}function it(t){for(var e=[],n=0;n<t.pointers.length;)e[n]={clientX:d(t.pointers[n].clientX),clientY:d(t.pointers[n].clientY)},n++;return{timeStamp:f(),pointers:e,center:rt(e),deltaX:t.deltaX,deltaY:t.deltaY}}function rt(t){var e=t.length;if(1===e)return{x:d(t[0].clientX),y:d(t[0].clientY)};for(var n=0,i=0,r=0;r<e;)n+=t[r].clientX,i+=t[r].clientY,r++;return{x:d(n/e),y:d(i/e)}}function ot(t,e,n){return{x:e/t||0,y:n/t||0}}function st(t,e){return t===e?H:p(t)>=p(e)?t<0?U:W:e<0?j:Z}function at(t,e,n){n||(n=$);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return Math.sqrt(i*i+r*r)}function ct(t,e,n){n||(n=$);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return 180*Math.atan2(r,i)/Math.PI}et.prototype={handler:function(){},init:function(){this.evEl&&I(this.element,this.evEl,this.domHandler),this.evTarget&&I(this.target,this.evTarget,this.domHandler),this.evWin&&I(D(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&x(this.element,this.evEl,this.domHandler),this.evTarget&&x(this.target,this.evTarget,this.domHandler),this.evWin&&x(D(this.element),this.evWin,this.domHandler)}};var ut={mousedown:N,mousemove:2,mouseup:q},lt="mousedown",ht="mousemove mouseup";function dt(){this.evEl=lt,this.evWin=ht,this.pressed=!1,et.apply(this,arguments)}b(dt,et,{handler:function(t){var e=ut[t.type];e&N&&0===t.button&&(this.pressed=!0),2&e&&1!==t.which&&(e=q),this.pressed&&(e&q&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:X,srcEvent:t}))}});var pt={pointerdown:N,pointermove:2,pointerup:q,pointercancel:J,pointerout:J},ft={2:Y,3:"pen",4:X,5:"kinect"},vt="pointerdown",At="pointermove pointerup pointercancel";function mt(){this.evEl=vt,this.evWin=At,et.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}r.MSPointerEvent&&!r.PointerEvent&&(vt="MSPointerDown",At="MSPointerMove MSPointerUp MSPointerCancel"),b(mt,et,{handler:function(t){var e=this.store,n=!1,i=t.type.toLowerCase().replace("ms",""),r=pt[i],o=ft[t.pointerType]||t.pointerType,s=o==Y,a=P(e,t.pointerId,"pointerId");r&N&&(0===t.button||s)?a<0&&(e.push(t),a=e.length-1):r&(q|J)&&(n=!0),a<0||(e[a]=t,this.callback(this.manager,r,{pointers:e,changedPointers:[t],pointerType:o,srcEvent:t}),n&&e.splice(a,1))}});var gt={touchstart:N,touchmove:2,touchend:q,touchcancel:J};function yt(){this.evTarget="touchstart",this.evWin="touchstart touchmove touchend touchcancel",this.started=!1,et.apply(this,arguments)}function Ct(t,e){var n=M(t.touches),i=M(t.changedTouches);return e&(q|J)&&(n=R(n.concat(i),"identifier",!0)),[n,i]}b(yt,et,{handler:function(t){var e=gt[t.type];if(e===N&&(this.started=!0),this.started){var n=Ct.call(this,t,e);e&(q|J)&&n[0].length-n[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:Y,srcEvent:t})}}});var bt={touchstart:N,touchmove:2,touchend:q,touchcancel:J},wt="touchstart touchmove touchend touchcancel";function Tt(){this.evTarget=wt,this.targetIds={},et.apply(this,arguments)}function Et(t,e){var n=M(t.touches),i=this.targetIds;if(e&(2|N)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var r,o,s=M(t.changedTouches),a=[],c=this.target;if(o=n.filter((function(t){return k(t.target,c)})),e===N)for(r=0;r<o.length;)i[o[r].identifier]=!0,r++;for(r=0;r<s.length;)i[s[r].identifier]&&a.push(s[r]),e&(q|J)&&delete i[s[r].identifier],r++;return a.length?[R(o.concat(a),"identifier",!0),a]:void 0}b(Tt,et,{handler:function(t){var e=bt[t.type],n=Et.call(this,t,e);n&&this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:Y,srcEvent:t})}});var It=2500;function xt(){et.apply(this,arguments);var t=w(this.handler,this);this.touch=new Tt(this.manager,t),this.mouse=new dt(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function kt(t,e){t&N?(this.primaryTouch=e.changedPointers[0].identifier,zt.call(this,e)):t&(q|J)&&zt.call(this,e)}function zt(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var n={x:e.clientX,y:e.clientY};this.lastTouches.push(n);var i=this.lastTouches;setTimeout((function(){var t=i.indexOf(n);t>-1&&i.splice(t,1)}),It)}}function St(t){for(var e=t.srcEvent.clientX,n=t.srcEvent.clientY,i=0;i<this.lastTouches.length;i++){var r=this.lastTouches[i],o=Math.abs(e-r.x),s=Math.abs(n-r.y);if(o<=25&&s<=25)return!0}return!1}b(xt,et,{handler:function(t,e,n){var i=n.pointerType==Y,r=n.pointerType==X;if(!(r&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(i)kt.call(this,e,n);else if(r&&St.call(this,n))return;this.callback(t,e,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Pt=O(l.style,"touchAction"),Mt=Pt!==a,Rt="compute",Ot="auto",Bt="manipulation",Dt="none",Ft="pan-x",Lt="pan-y",_t=function(){if(!Mt)return!1;var t={},e=r.CSS&&r.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach((function(n){t[n]=!e||r.CSS.supports("touch-action",n)})),t}();function Yt(t,e){this.manager=t,this.set(e)}Yt.prototype={set:function(t){t==Rt&&(t=this.compute()),Mt&&this.manager.element.style&&_t[t]&&(this.manager.element.style[Pt]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return m(this.manager.recognizers,(function(e){T(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))})),function(t){if(z(t,Dt))return Dt;var e=z(t,Ft),n=z(t,Lt);return e&&n?Dt:e||n?e?Ft:Lt:z(t,Bt)?Bt:Ot}(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,n=t.offsetDirection;if(this.manager.session.prevented)e.preventDefault();else{var i=this.actions,r=z(i,Dt)&&!_t[Dt],o=z(i,Lt)&&!_t[Lt],s=z(i,Ft)&&!_t[Ft];if(r){var a=1===t.pointers.length,c=t.distance<2,u=t.deltaTime<250;if(a&&c&&u)return}if(!s||!o)return r||o&&n&V||s&&n&K?this.preventSrc(e):void 0}},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var Xt=1,Gt=32;function Nt(t){this.options=c({},this.defaults,t||{}),this.id=B++,this.manager=null,this.options.enable=E(this.options.enable,!0),this.state=Xt,this.simultaneous={},this.requireFail=[]}function qt(t){return 16&t?"cancel":8&t?"end":4&t?"move":2&t?"start":""}function Jt(t){return t==Z?"down":t==j?"up":t==U?"left":t==W?"right":""}function Ht(t,e){var n=e.manager;return n?n.get(t):t}function Ut(){Nt.apply(this,arguments)}function Wt(){Ut.apply(this,arguments),this.pX=null,this.pY=null}function jt(){Ut.apply(this,arguments)}function Zt(){Nt.apply(this,arguments),this._timer=null,this._input=null}function Vt(){Ut.apply(this,arguments)}function Kt(){Ut.apply(this,arguments)}function Qt(){Nt.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function $t(t,e){return(e=e||{}).recognizers=E(e.recognizers,$t.defaults.preset),new te(t,e)}function te(t,e){this.options=c({},$t.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=new(this.options.inputClass||(L?mt:_?Tt:F?xt:dt))(this,nt),this.touchAction=new Yt(this,this.options.touchAction),ee(this,!0),m(this.options.recognizers,(function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])}),this)}function ee(t,e){var n,i=t.element;i.style&&(m(t.options.cssProps,(function(r,o){n=O(i.style,o),e?(t.oldCssProps[n]=i.style[n],i.style[n]=r):i.style[n]=t.oldCssProps[n]||""})),e||(t.oldCssProps={}))}Nt.prototype={defaults:{},set:function(t){return c(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(A(t,"recognizeWith",this))return this;var e=this.simultaneous;return e[(t=Ht(t,this)).id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return A(t,"dropRecognizeWith",this)||(t=Ht(t,this),delete this.simultaneous[t.id]),this},requireFailure:function(t){if(A(t,"requireFailure",this))return this;var e=this.requireFail;return-1===P(e,t=Ht(t,this))&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(A(t,"dropRequireFailure",this))return this;t=Ht(t,this);var e=P(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){var e=this,n=this.state;function i(n){e.manager.emit(n,t)}n<8&&i(e.options.event+qt(n)),i(e.options.event),t.additionalEvent&&i(t.additionalEvent),n>=8&&i(e.options.event+qt(n))},tryEmit:function(t){if(this.canEmit())return this.emit(t);this.state=Gt},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(Gt|Xt)))return!1;t++}return!0},recognize:function(t){var e=c({},t);if(!T(this.options.enable,[this,e]))return this.reset(),void(this.state=Gt);56&this.state&&(this.state=Xt),this.state=this.process(e),30&this.state&&this.tryEmit(e)},process:function(t){},getTouchAction:function(){},reset:function(){}},b(Ut,Nt,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,n=t.eventType,i=6&e,r=this.attrTest(t);return i&&(n&J||!r)?16|e:i||r?n&q?8|e:2&e?4|e:2:Gt}}),b(Wt,Ut,{defaults:{event:"pan",threshold:10,pointers:1,direction:Q},getTouchAction:function(){var t=this.options.direction,e=[];return t&V&&e.push(Lt),t&K&&e.push(Ft),e},directionTest:function(t){var e=this.options,n=!0,i=t.distance,r=t.direction,o=t.deltaX,s=t.deltaY;return r&e.direction||(e.direction&V?(r=0===o?H:o<0?U:W,n=o!=this.pX,i=Math.abs(t.deltaX)):(r=0===s?H:s<0?j:Z,n=s!=this.pY,i=Math.abs(t.deltaY))),t.direction=r,n&&i>e.threshold&&r&e.direction},attrTest:function(t){return Ut.prototype.attrTest.call(this,t)&&(2&this.state||!(2&this.state)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=Jt(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),b(jt,Ut,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[Dt]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||2&this.state)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),b(Zt,Nt,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[Ot]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,r=t.deltaTime>e.time;if(this._input=t,!i||!n||t.eventType&(q|J)&&!r)this.reset();else if(t.eventType&N)this.reset(),this._timer=v((function(){this.state=8,this.tryEmit()}),e.time,this);else if(t.eventType&q)return 8;return Gt},reset:function(){clearTimeout(this._timer)},emit:function(t){8===this.state&&(t&&t.eventType&q?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=f(),this.manager.emit(this.options.event,this._input)))}}),b(Vt,Ut,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[Dt]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||2&this.state)}}),b(Kt,Ut,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:V|K,pointers:1},getTouchAction:function(){return Wt.prototype.getTouchAction.call(this)},attrTest:function(t){var e,n=this.options.direction;return n&(V|K)?e=t.overallVelocity:n&V?e=t.overallVelocityX:n&K&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&n&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&p(e)>this.options.velocity&&t.eventType&q},emit:function(t){var e=Jt(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),b(Qt,Nt,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[Bt]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,r=t.deltaTime<e.time;if(this.reset(),t.eventType&N&&0===this.count)return this.failTimeout();if(i&&r&&n){if(t.eventType!=q)return this.failTimeout();var o=!this.pTime||t.timeStamp-this.pTime<e.interval,s=!this.pCenter||at(this.pCenter,t.center)<e.posThreshold;if(this.pTime=t.timeStamp,this.pCenter=t.center,s&&o?this.count+=1:this.count=1,this._input=t,0==this.count%e.taps)return this.hasRequireFailures()?(this._timer=v((function(){this.state=8,this.tryEmit()}),e.interval,this),2):8}return Gt},failTimeout:function(){return this._timer=v((function(){this.state=Gt}),this.options.interval,this),Gt},reset:function(){clearTimeout(this._timer)},emit:function(){8==this.state&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),$t.VERSION="2.0.7",$t.defaults={domEvents:!1,touchAction:Rt,enable:!0,inputTarget:null,inputClass:null,preset:[[Vt,{enable:!1}],[jt,{enable:!1},["rotate"]],[Kt,{direction:V}],[Wt,{direction:V},["swipe"]],[Qt],[Qt,{event:"doubletap",taps:2},["tap"]],[Zt]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}},te.prototype={set:function(t){return c(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?2:1},recognize:function(t){var e=this.session;if(!e.stopped){var n;this.touchAction.preventDefaults(t);var i=this.recognizers,r=e.curRecognizer;(!r||r&&8&r.state)&&(r=e.curRecognizer=null);for(var o=0;o<i.length;)n=i[o],2===e.stopped||r&&n!=r&&!n.canRecognizeWith(r)?n.reset():n.recognize(t),!r&&14&n.state&&(r=e.curRecognizer=n),o++}},get:function(t){if(t instanceof Nt)return t;for(var e=this.recognizers,n=0;n<e.length;n++)if(e[n].options.event==t)return e[n];return null},add:function(t){if(A(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(A(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,n=P(e,t);-1!==n&&(e.splice(n,1),this.touchAction.update())}return this},on:function(t,e){if(t!==a&&e!==a){var n=this.handlers;return m(S(t),(function(t){n[t]=n[t]||[],n[t].push(e)})),this}},off:function(t,e){if(t!==a){var n=this.handlers;return m(S(t),(function(t){e?n[t]&&n[t].splice(P(n[t],e),1):delete n[t]})),this}},emit:function(t,e){this.options.domEvents&&function(t,e){var n=o.createEvent("Event");n.initEvent(t,!0,!0),n.gesture=e,e.target.dispatchEvent(n)}(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](e),i++}},destroy:function(){this.element&&ee(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},c($t,{INPUT_START:N,INPUT_MOVE:2,INPUT_END:q,INPUT_CANCEL:J,STATE_POSSIBLE:Xt,STATE_BEGAN:2,STATE_CHANGED:4,STATE_ENDED:8,STATE_RECOGNIZED:8,STATE_CANCELLED:16,STATE_FAILED:Gt,DIRECTION_NONE:H,DIRECTION_LEFT:U,DIRECTION_RIGHT:W,DIRECTION_UP:j,DIRECTION_DOWN:Z,DIRECTION_HORIZONTAL:V,DIRECTION_VERTICAL:K,DIRECTION_ALL:Q,Manager:te,Input:et,TouchAction:Yt,TouchInput:Tt,MouseInput:dt,PointerEventInput:mt,TouchMouseInput:xt,SingleTouchInput:yt,Recognizer:Nt,AttrRecognizer:Ut,Tap:Qt,Pan:Wt,Swipe:Kt,Pinch:jt,Rotate:Vt,Press:Zt,on:I,off:x,each:m,merge:C,extend:y,assign:c,inherit:b,bindFn:w,prefixed:O}),(void 0!==r?r:"undefined"!=typeof self?self:{}).Hammer=$t,(i=function(){return $t}.call(e,n,e,t))===a||(t.exports=i)}(window,document)},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},s=[],a=0;a<t.length;a++){var c=t[a],u=i.base?c[0]+i.base:c[0],l=o[u]||0,h="".concat(u," ").concat(l);o[u]=l+1;var d=n(h),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var f=r(p,i);i.byIndex=a,e.splice(a,0,{identifier:h,updater:f,references:1})}s.push(h)}return s}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var o=i(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=n(o[s]);e[a].references--}for(var c=i(t,r),u=0;u<o.length;u++){var l=n(o[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{"use strict";var t=10,e={I:[[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],J:[[1,0,0],[1,1,1],[0,0,0]],L:[[0,0,1],[1,1,1],[0,0,0]],O:[[1,1],[1,1]],S:[[0,1,1],[1,1,0],[0,0,0]],Z:[[1,1,0],[0,1,1],[0,0,0]],T:[[0,1,0],[1,1,1],[0,0,0]]};function i(e,n){return e*t+n}var r=n(379),o=n.n(r),s=n(795),a=n.n(s),c=n(569),u=n.n(c),l=n(565),h=n.n(l),d=n(216),p=n.n(d),f=n(589),v=n.n(f),A=n(315),m={};m.styleTagTransform=v(),m.setAttributes=h(),m.insert=u().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=p(),o()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;var g=function(){function n(t){this.isGameOver=!1,this.playfield=[],this.tetromino={column:0,matrix:[],name:"",row:0,matrixSize:0,ghostColumn:0,ghostRow:0},this.isPromt=!1,this.isAutoMove=!0;for(var e=0;e<200;e++)t.append(document.createElement("div"));this.init()}return n.prototype.init=function(){this.generatePlayfield(),this.generateFigure()},n.prototype.generatePlayfield=function(){this.playfield=new Array(20).fill(1).map((function(){return new Array(t).fill(0)}))},n.prototype.generateFigure=function(){var t,n=(t=Object.keys(e))[Math.floor(Math.random()*t.length)],i=e[n],r=i.length,o=5-Math.floor(i.length/2);this.tetromino={name:n,matrix:i,row:-1,column:o,matrixSize:r,ghostColumn:this.isPromt?o:-1,ghostRow:(this.isPromt,-1)},this.calculateGhostPosition()},n.prototype.moveFigureDown=function(){this.tetromino.row+=1,this.canMove()||(this.tetromino.row-=1,this.landFigure())},n.prototype.moveFigureRight=function(){this.tetromino.column+=1,this.canMove()?this.calculateGhostPosition():this.tetromino.column-=1},n.prototype.moveFigureLeft=function(){this.tetromino.column-=1,this.canMove()?this.calculateGhostPosition():this.tetromino.column+=1},n.prototype.rotateFigure=function(){var t=this.tetromino.matrix,e=function(t){for(var e=t.length,n=[],i=0;i<e;i++){n[i]=[];for(var r=0;r<e;r++)n[i][r]=t[e-r-1][i]}return n}(this.tetromino.matrix);this.tetromino.matrix=e,this.canMove()?this.calculateGhostPosition():this.tetromino.matrix=t},n.prototype.dropFigureDown=function(){this.tetromino.row=this.tetromino.ghostRow,this.landFigure()},n.prototype.canMove=function(){for(var t=this.tetromino.matrix,e=0;e<t.length;e++)for(var n=0;n<t.length;n++)if(t[e][n]){if(this.isOutSideOfPlayBoard(e,n))return!1;if(this.isTouch(e,n))return!1}return!0},n.prototype.isOutSideOfPlayBoard=function(e,n){return this.tetromino.column+n<0||this.tetromino.column+n>=t||this.tetromino.row+e>=this.playfield.length},n.prototype.landFigure=function(){for(var t=0;t<this.tetromino.matrixSize;t++)for(var e=0;e<this.tetromino.matrixSize;e++)if(this.tetromino.matrix[t][e]){if(this.isOutSideOfTopBoard(t))return void(this.isGameOver=!0);this.playfield[this.tetromino.row+t][this.tetromino.column+e]=this.tetromino.name}this.clearFilledRows(),this.generateFigure()},n.prototype.isOutSideOfTopBoard=function(t){return this.tetromino.row+t<0},n.prototype.isTouch=function(t,e){var n;return null===(n=this.playfield[this.tetromino.row+t])||void 0===n?void 0:n[this.tetromino.column+e]},n.prototype.clearFilledRows=function(){var t=this.findFilledRows();this.removeFilledRows(t)},n.prototype.findFilledRows=function(){for(var t=[],e=0;e<20;e++)this.playfield[e].every((function(t){return Boolean(t)}))&&t.push(e);return t},n.prototype.removeFilledRows=function(t){var e=this;t.forEach((function(t){return e.dropRowsAbove(t)}))},n.prototype.dropRowsAbove=function(e){for(var n=e;n>0;n--)this.playfield[n]=this.playfield[n-1];this.playfield[0]=new Array(t).fill(0)},n.prototype.calculateGhostPosition=function(){var t=this.tetromino.row;for(this.tetromino.row++;this.canMove();)this.tetromino.row++;this.tetromino.ghostRow=this.tetromino.row-1,this.tetromino.ghostColumn=this.tetromino.column,this.tetromino.row=t},n}(),y=n(840),C=n.n(y),b=document.querySelector(".settings");null==b||b.addEventListener("mouseup",(function(){var e,n,r;null==b||b.classList.toggle("hide");var o=document.querySelector(".grid");null==o||o.classList.add("start");var s=new g(o),a=document.querySelectorAll(".grid>div");function c(t){switch(t.key){case"ArrowUp":p();break;case"ArrowDown":l();break;case"ArrowLeft":d();break;case"ArrowRight":h();break;case" ":A();default:return}}function u(){a.forEach((function(t){return t.removeAttribute("class")})),function(){for(var e=0;e<20;e++)for(var n=0;n<t;n++)if(s.playfield[e][n]){var r=s.playfield[e][n].toString(),o=i(e,n);a[o].classList.add(r)}}(),function(){for(var t=s.tetromino.name,e=s.tetromino.matrix.length,n=0;n<e;n++)for(var r=0;r<e;r++)if(s.tetromino.matrix[n][r]&&!(s.tetromino.row+n<0)){var o=i(s.tetromino.row+n,s.tetromino.column+r);a[o].classList.add(t)}}(),function(){if(s.isPromt)for(var t=s.tetromino.matrix.length,e=0;e<t;e++)for(var n=0;n<t;n++)if(s.tetromino.matrix[e][n]&&!(s.tetromino.ghostRow+e<0)){var r=i(s.tetromino.ghostRow+e,s.tetromino.ghostColumn+n);a[r].classList.add("ghost")}}()}function l(){s.moveFigureDown(),u(),v(),s.isAutoMove&&f(),s.isGameOver&&m()}function h(){s.moveFigureRight(),u()}function d(){s.moveFigureLeft(),u()}function p(){s.rotateFigure(),u()}function f(){e=setTimeout((function(){n=requestAnimationFrame(l)}),1e3)}function v(){cancelAnimationFrame(n),clearTimeout(e)}function A(){s.dropFigureDown(),u(),v(),s.isAutoMove&&f(),s.isGameOver&&m()}function m(){v(),document.removeEventListener("keydown",c),r.off("panstart panleft panright pandown swipedown tap"),function(t){var e,n,i,r;e=this,n=void 0,r=function(){return function(t,e){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(e){switch(e.label){case 0:return[4,Promise.all(t.map((function(t,e){return new Promise((function(n){setTimeout((function(){t.classList.add("gameover")}),10*e),setTimeout((function(){t.removeAttribute("class"),n(!0)}),10*e+500)}))})))];case 1:return e.sent(),o&&(o.innerHTML=""),null==b||b.classList.toggle("hide"),null==o||o.classList.remove("start"),[2]}}))},new((i=void 0)||(i=Promise))((function(t,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(t){t(n)}))).then(s,a)}c((r=r.apply(e,n||[])).next())}))}(Array.from(a).filter((function(t){return t.classList.length>0})))}document.addEventListener("keydown",c),function(){document.addEventListener("dblclick",(function(t){t.preventDefault()})),(r=new(C())(document.querySelector("body"))).get("pan").set({direction:C().DIRECTION_ALL}),r.get("swipe").set({direction:C().DIRECTION_ALL});var t=0,e=0;r.on("panstart",(function(){t=0,e=0})),r.on("panleft",(function(n){Math.abs(n.deltaX-t)>30&&(d(),t=n.deltaX,e=n.deltaY)})),r.on("panright",(function(n){Math.abs(n.deltaX-t)>30&&(h(),t=n.deltaX,e=n.deltaY)})),r.on("pandown",(function(n){Math.abs(n.deltaY-e)>30&&(l(),t=n.deltaX,e=n.deltaY)})),r.on("swipedown",(function(){A()})),r.on("tap",(function(){p()}))}(),l()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,